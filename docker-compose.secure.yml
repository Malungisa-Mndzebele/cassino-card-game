version: '3.8'

services:
  # PostgreSQL Database with Security Hardening
  postgres:
    image: postgres:15-alpine
    container_name: casino-postgres-secure
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-casino_game}
      POSTGRES_USER: ${POSTGRES_USER:-casino_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Security settings
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data_secure:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${POSTGRES_PASSWORD} pg_isready -U ${POSTGRES_USER:-casino_user} -d ${POSTGRES_DB:-casino_game} -h localhost -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - casino-network-secure
    restart: unless-stopped
    # Security: Run as non-root user
    user: postgres
    # Security: Read-only root filesystem (except for data volume)
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Backend API with Security Hardening
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.secure
    container_name: casino-backend-secure
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-casino_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-casino_game}
      - PORT=8000
      - HOST=0.0.0.0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-HS256}
      - JWT_EXPIRE_MINUTES=${JWT_EXPIRE_MINUTES:-30}
      - SESSION_SECRET=${SESSION_SECRET}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Read-only application code
      - ./backend:/app:ro
      # Writable temp directory
      - backend_tmp:/tmp
    networks:
      - casino-network-secure
    restart: unless-stopped
    # Security: Run as non-root user
    user: "1000:1000"
    # Security: Read-only root filesystem (except for temp)
    read_only: true
    tmpfs:
      - /tmp
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    # Security: Drop all capabilities
    cap_drop:
      - ALL
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true

  # Frontend with Security Hardening
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile.secure
    container_name: casino-frontend-secure
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://backend:8000}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://backend:8000}
      - NODE_ENV=production
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only
    depends_on:
      - backend
    networks:
      - casino-network-secure
    restart: unless-stopped
    # Security: Run as non-root user
    user: "1000:1000"
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    # Security: Limit resources
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    # Security: Drop all capabilities except CHOWN and SETGID for nginx
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true

  # Reverse Proxy with Security Headers
  nginx:
    image: nginx:alpine
    container_name: casino-nginx-secure
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.frontend.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - casino-network-secure
    restart: unless-stopped
    # Security: Run as non-root user
    user: "101:101"
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    # Security: Drop all capabilities except CHOWN and SETGID
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
    # Security: No new privileges
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data_secure:
    driver: local
  backend_tmp:
    driver: local
  nginx_cache:
    driver: local

networks:
  casino-network-secure:
    driver: bridge
    # Security: Enable encryption between containers
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
