name: Casino Card Game CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd backend
        python run_all_tests.py
      env:
        DATABASE_URL: sqlite:///./test_casino_game.db
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Lint frontend
      run: npm run lint || true

    - name: Verify frontend files
      run: |
        ls -la index.html
        ls -la dev-server.js

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Run build step
      run: npm run build
    
    - name: Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Project files ready for deployment"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Prepare deployment files
      run: |
        echo "📦 Preparing files for deployment..."
        
        # Create deployment directory
        mkdir -p dist
        
        # Copy frontend files
        cp index.html dist/
        cp manifest.json dist/ || echo "No manifest.json"
        cp favicon.svg dist/ || echo "No favicon.svg"
        cp -r public dist/ || echo "No public directory"
        cp -r frontend dist/ || echo "No frontend directory"
        cp package.json dist/
        cp package-lock.json dist/ || echo "No package-lock.json"
        
        # Copy backend files
        mkdir -p dist/backend
        cp -r backend/* dist/backend/
        
        # Create PHP wrapper for Python backend
        cat > dist/backend/start.php << 'EOF'
        <?php
        // Set headers for JSON response
        header('Content-Type: application/json');
        
        // Get the request path
        $request_uri = $_SERVER['REQUEST_URI'];
        $path = parse_url($request_uri, PHP_URL_PATH);
        
        // Remove /backend from the start if present
        $path = preg_replace('/^\/backend/', '', $path);
        
        // Forward the request to Python backend
        $python_url = "http://localhost:8000" . $path;
        $method = $_SERVER['REQUEST_METHOD'];
        
        // Get request body for POST/PUT requests
        $body = file_get_contents('php://input');
        
        // Set up cURL request
        $ch = curl_init($python_url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        
        if ($method === 'POST' || $method === 'PUT') {
            curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json',
                'Content-Length: ' . strlen($body)
            ));
        }
        
        // Execute request
        $response = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        // Set response code
        http_response_code($http_code);
        
        // Output response
        echo $response;
        EOF
        
        # Prefer repo .htaccess if present; otherwise, write a default
        if [ -f .htaccess ]; then
          cp .htaccess dist/.htaccess
        else
          cat > dist/.htaccess << 'EOF'
          RewriteEngine On
          
          # Handle backend requests (API)
          RewriteRule ^api/(.*)$ backend/start.php [QSA,L]
          RewriteRule ^health$ backend/start.php [QSA,L]
          RewriteRule ^rooms/(.*)$ backend/start.php [QSA,L]
          RewriteRule ^game/(.*)$ backend/start.php [QSA,L]
          
          # Handle frontend routes
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule ^ index.html [QSA,L]
          EOF
        fi
        
        # Write deploy trigger file for cron-maintenance on server
        date -u +%Y-%m-%dT%H:%M:%SZ > dist/deploy.trigger
        
        echo "✅ Deployment files prepared"
    
    - name: Deploy to Spaceship via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        server-dir: ${{ secrets.FTP_SERVER_DIR }}
    
    # SSH step removed by request; deployment is FTP-only

    - name: Deployment Status
      run: |
        echo "🎉 Casino Card Game deployed successfully!"
        echo "✅ All tests passed"
        echo "✅ Build completed successfully"
        echo "✅ Deployed to khasinogaming.com"
        echo "🌐 Live at: https://khasinogaming.com/cassino/"
        echo "🎮 Ready for multiplayer gaming!"
