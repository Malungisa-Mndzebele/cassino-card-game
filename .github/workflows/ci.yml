name: Casino Card Game CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        cd backend
        python run_all_tests.py
      env:
        DATABASE_URL: sqlite:///./test_casino_game.db
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Lint frontend
      run: npm run lint || true

    - name: Frontend unit tests (Vitest)
      run: npm run test:frontend

    - name: Build frontend for E2E preview
      run: npm run build

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: E2E tests (Playwright)
      run: npm run test:e2e

    - name: Verify frontend files
      run: |
        ls -la index.html
        ls -la dev-server.js

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Run Vite build
      run: npm run build
    
    - name: Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Project files ready for deployment"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    
    - name: Prepare deployment files
      run: |
        echo "📦 Preparing files for deployment..."
        
        # Create deployment directory
        mkdir -p dist
        
        # Vite build output already in dist/; ensure root .htaccess present
        if [ -f .htaccess ]; then cp .htaccess dist/.htaccess; fi
        
        # Copy backend files (includes backend/start.php already)
        mkdir -p dist/backend
        cp -r backend/* dist/backend/
        
        # Prefer repo .htaccess if present; otherwise, write a default
        if [ -f .htaccess ]; then
          cp .htaccess dist/.htaccess
        else
          printf '%s\n' \
            'RewriteEngine On' \
            '' \
            '# Handle backend requests (API)' \
            'RewriteRule ^api/(.*)$ backend/start.php [QSA,L]' \
            'RewriteRule ^health$ backend/start.php [QSA,L]' \
            'RewriteRule ^rooms/(.*)$ backend/start.php [QSA,L]' \
            'RewriteRule ^game/(.*)$ backend/start.php [QSA,L]' \
            '' \
            '# Handle frontend routes' \
            'RewriteCond %{REQUEST_FILENAME} !-f' \
            'RewriteCond %{REQUEST_FILENAME} !-d' \
            'RewriteRule ^ index.html [QSA,L]' \
            > dist/.htaccess
        fi
        
        # Write deploy trigger file for cron-maintenance on server
        date -u +%Y-%m-%dT%H:%M:%SZ > dist/deploy.trigger
        
        echo "✅ Deployment files prepared"
    
    - name: Deploy to Spaceship via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_HOST }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./dist/
        server-dir: ${{ secrets.FTP_SERVER_DIR }}
        exclude: |
          backend/.env
          backend/venv/**
          backend/__pycache__/**
          backend/**/*.pyc
          **/*.db
          **/*.log
    
    # SSH step removed by request; deployment is FTP-only

    - name: Deployment Status
      run: |
        echo "🎉 Casino Card Game deployed successfully!"
        echo "✅ All tests passed"
        echo "✅ Build completed successfully"
        echo "✅ Deployed to khasinogaming.com"
        echo "🌐 Live at: https://khasinogaming.com/cassino/"
        echo "🎮 Ready for multiplayer gaming!"
